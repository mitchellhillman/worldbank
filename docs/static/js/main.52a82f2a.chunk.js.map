{"version":3,"sources":["Graph.jsx","App.js","index.js"],"names":["getRangeOf","arrayOfObjects","key","values","filter","object","map","Number","parseInt","Math","min","max","getTempForYear","data","year","avgTemp","datum","toFixed","undefined","tooltipStyles","defaultStyles","borderRadius","boxShadow","withTooltip","tooltipTimeout","number","climateData","GDP","height","hideTooltip","showTooltip","tooltipData","tooltipLeft","tooltipOpen","tooltipTop","width","yearRange","lineColor","xGDPScale","scaleLinear","domain","range","yGDPScale","xAvgTempScale","yAvgTempScale","Group","value","date","barHeight","barWidth","Bar","x","y","fill","onMouseMove","clearTimeout","onMouseLeave","window","setTimeout","id","size","refX","LinePath","curve","curveBasisOpen","left","stroke","strokeWidth","markerEnd","AxisBottom","top","scale","tickStroke","tickFormat","tickLabelProps","fontSize","fontFamily","textAnchor","dy","Tooltip","style","App","useState","countries","setCountries","selectedCountry","setSelectedCountry","startYear","setStartYear","endYear","setEndYear","setGDP","setclimateData","useEffect","fetch","then","response","json","getYearRange","allYears","className","onChange","event","target","length","name","disabled","Slider","newValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52a82f2a.chunk.js","sourcesContent":["import { Bar, LinePath } from \"@vx/shape\";\nimport { Group } from \"@vx/group\";\nimport { AxisBottom } from \"@vx/axis\";\nimport {curveBasisOpen} from \"@vx/curve\";\nimport { MarkerCircle } from \"@vx/marker\";\nimport { withTooltip, Tooltip, defaultStyles } from \"@vx/tooltip\";\n\nimport { scaleLinear } from \"@vx/scale\";\n\nconst getRangeOf = (arrayOfObjects, key) => {\n  const values = arrayOfObjects\n    .filter(object => object[key])\n    .map(object => Number.parseInt(object[key]));\n  return [Math.min(...values), Math.max(...values)];\n};\n\nconst getTempForYear = (data, year) => {\n  const avgTemp = data.filter((datum =>\n    Number.parseInt(datum.year) === Number.parseInt(year)))[0]?.data;\n  return avgTemp ? avgTemp.toFixed(2) : undefined;\n};\n\nconst formatGDP = (number) => {\n  const billions = number / 100000000000;\n  return \"GDP $\" + billions.toFixed(2) + \"bln.\";\n};\n\nconst tooltipStyles = {\n  ...defaultStyles,\n  borderRadius: 0,\n  boxShadow: \"none\"\n};\n\nconst Graph = ({\n  climateData,\n  GDP,\n  height,\n  hideTooltip,\n  showTooltip,\n  tooltipData,\n  tooltipLeft,\n  tooltipOpen,\n  tooltipTop,\n  width,\n  yearRange,\n}) => {\n  let tooltipTimeout;\n  const bottomAxisHeight = 30;\n  const bottomAxisMargin = 10;\n  const lineOffset = 100;\n  const lineColor = \"#00aaff\";\n  const barColor = \"#bbe5fa\";\n\n  const xGDPScale = scaleLinear({\n    domain: yearRange,\n    range: [0, width]\n  });\n\n  const yGDPScale = scaleLinear({\n    domain: getRangeOf(GDP, \"value\"),\n    range: [height, 40]\n  });\n\n  const xAvgTempScale = scaleLinear({\n    domain: yearRange,\n    range: [0, width]\n  });\n\n  const yAvgTempScale = scaleLinear({\n    domain: getRangeOf(climateData, \"data\"),\n    range: [height, 0]\n  });\n\n  return (\n    <>\n      <svg width={width} height={height}>\n        <Group>\n          {GDP.filter(object => object.value)\n            .map(({date, value}) => {\n              const barHeight = height - yGDPScale(value);\n              const barWidth = (width / ( xGDPScale.domain()[1] - xGDPScale.domain()[0])) - 2;\n              return value && (\n                <Bar\n                  key={`bar-${value}`}\n                  x={xGDPScale(date)}\n                  y={height - barHeight - (bottomAxisHeight + bottomAxisMargin)}\n                  width={barWidth}\n                  height={barHeight}\n                  fill={barColor}\n                  onMouseMove={() => {\n                    if (tooltipTimeout) clearTimeout(tooltipTimeout);\n                    showTooltip({\n                      tooltipData: {\n                        avgTemp: getTempForYear(climateData, date),\n                        year: date,\n                        GDP: value\n                      },\n                      tooltipTop: height - barHeight - (bottomAxisHeight + bottomAxisMargin),\n                      tooltipLeft: xGDPScale(date),\n                    });\n                  }}\n                  onMouseLeave={() => {\n                    tooltipTimeout = window.setTimeout(() => {\n                      hideTooltip();\n                    }, 300);\n                  }}\n                />\n              );\n            })\n          }\n\n          <MarkerCircle id=\"marker-circle\" fill={lineColor} size={1.5} refX={2} />\n          <LinePath\n            curve={curveBasisOpen}\n            data={climateData}\n            left={0}\n            x={({year}) => xAvgTempScale(year)}\n            y={({data}) => yAvgTempScale(data) + lineOffset }\n            stroke={lineColor}\n            strokeWidth={2}\n            markerEnd=\"url(#marker-circle)\"\n          />\n\n          <AxisBottom\n            top={height - bottomAxisHeight}\n            left={0}\n            scale={xGDPScale}\n            stroke={\"#000\"}\n            strokeWidth={2}\n            tickStroke={\"#000\"}\n            tickFormat={value => value}\n            tickLabelProps={() => ({\n              fill: \"#000\",\n              fontSize: 10,\n              fontFamily: \"Inter\",\n              textAnchor: \"end\",\n              dy: \"0.33em\",\n            })}\n          />\n        </Group>\n      </svg>\n\n      {tooltipOpen && tooltipData && (\n        <Tooltip top={tooltipTop} left={tooltipLeft} style={tooltipStyles}>\n          <div><strong>{tooltipData.year}</strong></div>\n          <div>{formatGDP(tooltipData.GDP)}</div>\n          {tooltipData.avgTemp && <div>{tooltipData.avgTemp + \"C\"}</div>}\n        </Tooltip>\n      )}\n    </>\n  );\n};\n\nexport default withTooltip(Graph);","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { Slider } from \"@material-ui/core\";\nimport Graph from \"./Graph\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState();\n  const [selectedCountry, setSelectedCountry] = useState(\"USA\");\n  const [startYear, setStartYear] = useState(\"1980\");\n  const [endYear, setEndYear] = useState(\"2012\");\n  const [GDP, setGDP] = useState([]);\n  const [climateData, setclimateData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://api.worldbank.org/v2/country?format=json&per_page=500\")\n      .then(response => response.json())\n      .then(data => {\n        setCountries(data[1]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if(selectedCountry) {\n      fetch(\"https://api.worldbank.org/v2/country/\" + selectedCountry + \"/indicator/NY.GDP.MKTP.CD?format=json\")\n        .then(response => response.json())\n        .then(data => {\n          setGDP(data[1]);\n        });\n    }\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    if(selectedCountry) {\n      fetch(\"http://climatedataapi.worldbank.org/climateweb/rest/v1/country/cru/tas/year/\" + selectedCountry + \".json\")\n        .then(response => response.json())\n        .then(data => {\n          setclimateData(data);\n        });\n    }\n  }, [selectedCountry]);\n\n  const getYearRange = (data) => {\n    const allYears = data.map(({date}) => Number.parseInt(date));\n    const minYear = Math.min(...allYears);\n    const maxYear = Math.max(...allYears);\n    return [minYear, maxYear];\n  };\n\n  const handleSliderChange = (event, newValue) => {\n    setStartYear(newValue[0]);\n    setEndYear(newValue[1]);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Climate and GDP Trends</h1>\n      <p>Average temperature and GDP trends over time.</p>\n      <label>\n        <p className=\"screenreader\">Select Country</p>\n        <select onChange={(event) => {setSelectedCountry(event.target.value);}} value={selectedCountry}>\n          {countries?.length\n            ? countries.map(({id, name}) => <option key={id} value={id} >{name}</option>)\n            : <option disabled>Loading&hellip;</option>\n          }\n        </select>\n      </label>\n\n      {GDP && climateData\n        ? <>\n          <Graph width={600} height={300} GDP={GDP} climateData={climateData} yearRange={[startYear, endYear]} />\n          <div className=\"slider\">\n            <Slider value={[startYear, endYear]} onChange={handleSliderChange} min={getYearRange(GDP)[0]} max={getYearRange(GDP)[1]} />\n          </div>\n        </>\n        : <p className=\"loading\">Loading&hellip;</p>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}